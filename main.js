!function(){"use strict";class e{constructor(e,t,s,r,i,n){this._name=e.name,this._link=e.link,this._id=e._id,this._ownerId=e.owner._id,this._likes=e.likes,this._userId=t,this._cardSelector=s,this._handleCardClick=r,this._handleDeleteClick=i,this._handleLikeClick=n}deleteCard(){this._cardElement.remove(),this._cardElement=null}addLikes(){this._likeBtn.classList.add("card__like-button_active")}removeLikes(){this._likeBtn.classList.remove("card__like-button_active")}updateLikes(e){this._cardLike.textContent=e.likes.length}isLiked(){return!!this._likeBtn.classList.contains("card__like-button_active")}_setEventListeners(){this._likeBtn=this._cardElement.querySelector(".card__like-button"),this._deleteBtn=this._cardElement.querySelector(".card__delete-button"),this._likeBtn.addEventListener("click",(()=>{this._handleLikeClick(this._id)})),this._deleteBtn.addEventListener("click",(()=>{this._handleDeleteClick(this._id)})),this._cardImgElement.addEventListener("click",(()=>{this._handleCardClick(this._name,this._link)}))}_getElement(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getCardElement(){return this._cardElement=this._getElement(),this._cardImgElement=this._cardElement.querySelector(".card__image"),this._titleElement=this._cardElement.querySelector(".card__title"),this._cardLike=this._cardElement.querySelector(".card__like-number"),this._cardLike.textContent=this._likes.length,this._setEventListeners(),this._userId!=this._ownerId&&this._deleteBtn.remove(),this._cardImgElement.src=this._link,this._cardImgElement.alt=this._name,this._titleElement.textContent=this._name,this._cardElement}}class t{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitBtnSelector=e.submitButtonSelector,this._inactiveBtnClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formELement=t}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(e){return e.validity.valid}_setFormEventListeners(){this._inputElements=[...this._formELement.querySelectorAll(this._inputSelector)],this._submitBtn=this._formELement.querySelector(this._submitBtnSelector),this.toggleButtonState(),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}_disableButton(){this._submitBtn.classList.add(this._inactiveBtnClass),this._submitBtn.disabled=!0}_enableButton(){this._submitBtn.classList.remove(this._inactiveBtnClass),this._submitBtn.disabled=!1}toggleButtonState(){this._inputElements.every(this._hasInvalidInput)?this._enableButton():this._disableButton()}_showInputError(e){const t=this._formELement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formELement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}enableValidation(){this._formElements=[...document.querySelectorAll(this._formSelector)],this._formElements.forEach((e=>{e.addEventListener("submit",(e=>{e.preventDefault()})),this._setFormEventListeners()}))}}const s={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input-error",errorClass:"modal__error_visible"},r=document.querySelector("#profile-edit-modal"),i=r.querySelector(".modal__form"),n=document.querySelector("#card-add-modal"),o=n.querySelector(".modal__form"),a=(document.querySelector(".cards__list"),document.querySelector("#image-modal")),l=document.querySelector("#delete-modal"),d=document.querySelector("#avatar-modal"),c=d.querySelector("#avatar-modal-form"),h=document.querySelector(".profile__edit"),_=r.querySelector(".modal__close"),u=document.querySelector(".profile__add"),m=n.querySelector(".modal__close"),E=document.querySelector(".profile__title"),p=document.querySelector(".profile__description"),S=document.querySelector(".profile__image"),v=a.querySelector(".modal__close"),k=l.querySelector(".modal__close"),L=document.querySelector(".profile__avatar-edit-btn"),f=d.querySelector(".modal__close"),b=document.querySelector("#title-input"),y=document.querySelector("#description-input");document.querySelector("#card-title-input"),document.querySelector("#url-input");var C=class{constructor(e){let{modalSelector:t}=e;this._modalElement=t}open(){this._modalElement.classList.add("modal__opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._modalElement.classList.remove("modal__opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{27===e.which&&this.close()};_handleOverlayClose(e){e.target.classList.contains("modal__opened")&&this.close()}setEventListeners(){this._modalElement.querySelector(".modal__close").addEventListener("click",(()=>this.close())),this._modalElement.addEventListener("mousedown",(e=>this._handleOverlayClose(e)))}},g=class extends C{constructor(e,t){super({modalSelector:e}),this._modalForm=this._modalElement.querySelector(".modal__form"),this._modalSubmitBtn=this._modalElement.querySelector(".modal__button"),this._modalInputs=this._modalElement.querySelectorAll(".modal__input"),this._handleSubmitForm=t}_getInputValues(){const e={};return this._modalInputs.forEach((t=>{e[t.name]=t.value})),e}uxUpload(e,t){this._modalSubmitBtn.textContent=t}setEventListeners(){this._modalSubmitBtn.addEventListener("click",(e=>{e.preventDefault(),this._handleSubmitForm(this._getInputValues()),this.close()})),super.setEventListeners()}close(){this._modalForm.reset(),super.close()}};const q=new class{constructor(e){let{name:t,about:s,avatar:r}=e;this._user=t,this._about=s,this._avatar=r}getUserInfo(){return{name:this._user.textContent,about:this._about.textContent,avatar:this._avatar}}setUserInfo(e){let{name:t,about:s,avatar:r}=e;this._user.textContent=t,this._about.textContent=s,this._avatar.src=r,this._avatar.alt=t}}({name:E,about:p,avatar:S});let I;const B=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkStatus(e){if(e.ok)return e.json();Promise.reject(`Error: ${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then((e=>this._checkStatus(e)))}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then((e=>this._checkStatus(e)))}editUserProfile(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.title,about:e.description})}).then((e=>this._checkStatus(e)))}editUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>this._checkStatus(e)))}addNewCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then((e=>this._checkStatus(e)))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>this._checkStatus(e)))}addCardLike(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this._headers}).then((e=>this._checkStatus(e)))}removeCardLike(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this._headers}).then((e=>this._checkStatus(e)))}getApiInfo(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"c7546df9-ad4c-4c05-9963-4c89159dd0ba","Content-Type":"application/json"}});let U;const x=new g(r,(e=>{x.uxUpload(!0,"Saving..."),B.editUserProfile(e).then((e=>{q.setUserInfo(e),x.close()})).catch((e=>console.error(e))).finally((()=>{x.uxUpload(!1,"Save")}))})),w=new g(n,(e=>{w.uxUpload(!0,"Creating..."),B.addNewCard(e).then((e=>{T(e),w.close()})).catch((e=>console.error(e))).finally((()=>{w.uxUpload(!1,"Create")}))})),$=new class extends C{constructor(e){let{modalSelector:t}=e;super({modalSelector:t}),this._modalImage=this._modalElement.querySelector(".modal__image"),this._modalCaption=this._modalElement.querySelector(".modal__caption")}open(e,t){this._modalImage.src=t,this._modalImage.alt=e,this._modalCaption.textContent=e,super.open()}}({modalSelector:a}),A=new class extends C{constructor(e){super({modalSelector:e}),this._confirmButton=this._modalElement.querySelector("#delete-btn-submit")}submitAction(e){this._handleSubmit=e}confirmDelete(e,t){this._confirmButton.textContent=e?"Deleting...":t}setEventListeners(){super.setEventListeners(),this._confirmButton.addEventListener("click",(e=>{e.preventDefault(),this._handleSubmit()}))}}(l),D=new g(d,(e=>{D.uxUpload(!0,"Saving..."),B.editUserAvatar(e.avatar).then((e=>{q.setUserInfo(e),D.close()})).catch((e=>console.error(e))).finally((()=>{D.uxUpload(!1,"Save")}))}));function T(t){const s=function(t){const s=new e(t,I,"#card-template",((e,t)=>{$.open(e,t)}),(e=>{A.open(),A.submitAction((()=>{A.confirmDelete(!0),B.deleteCard(e).then((()=>{s.deleteCard(),A.close()})).catch((e=>console.error(e))).finally((()=>{A.confirmDelete(!1,"Yes")}))}))}),(e=>{s.isLiked()?B.removeCardLike(e).then((e=>{s.removeLikes(),s.updateLikes(e)})).catch((e=>console.error(e))):B.addCardLike(e).then((e=>{s.addLikes(),s.updateLikes(e)})).catch((e=>console.error(e)))}));return s.getCardElement()}(t);U.prependItem(s)}B.getApiInfo().then((e=>{let[t,s]=e;I=t._id,q.setUserInfo(t),U=new class{constructor(e,t){let{item:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}}({item:s,renderer:T},".cards__list"),U.renderItems()})).catch((e=>console.error(e))),h.addEventListener("click",(()=>{b.value=E.textContent,y.value=p.textContent,x.open()})),u.addEventListener("click",(()=>{w.open(),V.toggleButtonState()})),L.addEventListener("click",(()=>{D.open(),F.toggleButtonState()})),_.addEventListener("click",(()=>x.close())),m.addEventListener("click",(()=>w.close())),v.addEventListener("click",(()=>$.close())),k.addEventListener("click",(()=>A.close())),f.addEventListener("click",(()=>D.close())),x.setEventListeners(),w.setEventListeners(),$.setEventListeners(),A.setEventListeners(),D.setEventListeners();const P=new t(s,i),V=new t(s,o),F=new t(s,c);P.enableValidation(),V.enableValidation(),F.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,